'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
exports.ready = exports.update = exports.$ = exports.template = void 0;
exports.template = `
<div class="container">
<ui-checkbox class="autoBinding" value="false">AutoBinding</ui-checkbox>
</div>
`;
exports.style = `
.container {
    margin-top: 10px;
    margin-bottom: 5px;
    text-align: center;
    border: dashed 1px #6b6b6b;
    border-radius: 4px;
}
`;
exports.$ = {
    container: ".container",
    autoBinding: ".autoBinding"
};
async function update(dump) {
    this.dump = dump;
    this.$.autoBinding.value = await getAutoBinding.call(this, this.dump);
}
exports.update = update;
function ready() {
    this.$.autoBinding.addEventListener("confirm", async () => {
        await setAutoBinding.call(this, this.dump, this.$.autoBinding.value);
    });
}
exports.ready = ready;
async function getAutoBindingMap(dump) {
    let autoBindingData = { prefabUuid: ``, autoBindingMap: {} };
    // 根据组件的节点uuid找到节点的INode dump数据
    let nodeDump = await Editor.Message.request('scene', 'query-node', dump.value.node.value.uuid);
    if (!nodeDump.__prefab__) {
        this.$['container'].setAttribute('hidden', '');
        return autoBindingData;
    }
    // 根据节点对应的prefab查询使用了资源 UUID 的节点
    autoBindingData.prefabUuid = nodeDump.__prefab__.uuid;
    let prefabNodeuuids = await Editor.Message.request("scene", "query-nodes-by-asset-uuid", autoBindingData.prefabUuid);
    if (prefabNodeuuids.length <= 0) {
        this.$['container'].setAttribute('hidden', '');
        return autoBindingData;
    }
    let prefabNodeDump = await Editor.Message.request("scene", "query-node", prefabNodeuuids[0]);
    if (!prefabNodeDump) {
        this.$['container'].setAttribute('hidden', '');
        return autoBindingData;
    }
    this.$['container'].removeAttribute('hidden');
    // 找到自动绑定组件，判断对应的绑定uuid和当前组件的uuid是否一致，一致则表示选中
    let nodeName = prefabNodeDump.name.value;
    let nodeNameAutoBinding = `${nodeName}AutoBinding`;
    for (let index = 0; index < prefabNodeDump.__comps__.length; index++) {
        const element = prefabNodeDump.__comps__[index];
        if (element.type == nodeNameAutoBinding) {
            for (const [key, value] of Object.entries(element.value)) {
                let v = value;
                try {
                    if (v.extends && v.extends.includes("cc.Component")) {
                        autoBindingData.autoBindingMap[v.value.uuid] = true;
                    }
                }
                catch (error) {
                    console.log(v);
                    console.log(error);
                }
            }
        }
    }
    return autoBindingData;
}
async function getAutoBinding(dump) {
    let autoBindingData = await getAutoBindingMap.call(this, dump);
    return autoBindingData.autoBindingMap[dump.value.uuid.value] || false;
}
async function setAutoBinding(dump, value) {
    let autoBindingData = await getAutoBindingMap.call(this, dump);
    autoBindingData.autoBindingMap[dump.value.uuid.value] = value;
    Editor.Message.send('scene', 'execute-scene-script', {
        name: 'ui-autobinding',
        method: 'updateAutoBinding',
        args: [autoBindingData],
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5zcGVjdG9yLWNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NvdXJjZS9pbnNwZWN0b3ItY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLFlBQVksQ0FBQzs7O0FBR0EsUUFBQSxRQUFRLEdBQUc7Ozs7Q0FJdkIsQ0FBQztBQUVGLE9BQU8sQ0FBQyxLQUFLLEdBQUc7Ozs7Ozs7O0NBUWYsQ0FBQztBQUVXLFFBQUEsQ0FBQyxHQUFHO0lBQ2IsU0FBUyxFQUFFLFlBQVk7SUFDdkIsV0FBVyxFQUFFLGNBQWM7Q0FDOUIsQ0FBQztBQUVLLEtBQUssVUFBVSxNQUFNLENBQVksSUFBUztJQUM3QyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztJQUNqQixJQUFJLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxLQUFLLEdBQUcsTUFBTSxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDMUUsQ0FBQztBQUhELHdCQUdDO0FBQ0QsU0FBZ0IsS0FBSztJQUNqQixJQUFJLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDdEQsTUFBTSxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3pFLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQztBQUpELHNCQUlDO0FBRUQsS0FBSyxVQUFVLGlCQUFpQixDQUFZLElBQVM7SUFDakQsSUFBSSxlQUFlLEdBQWtFLEVBQUMsVUFBVSxFQUFFLEVBQUUsRUFBRSxjQUFjLEVBQUUsRUFBRSxFQUFDLENBQUM7SUFDMUgsK0JBQStCO0lBQy9CLElBQUksUUFBUSxHQUFHLE1BQU0sTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLFlBQVksRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDL0YsSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLEVBQUU7UUFDdEIsSUFBSSxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQy9DLE9BQU8sZUFBZSxDQUFBO0tBQ3pCO0lBQ0QsZ0NBQWdDO0lBQ2hDLGVBQWUsQ0FBQyxVQUFVLEdBQUcsUUFBUSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUM7SUFDdEQsSUFBSSxlQUFlLEdBQUcsTUFBTSxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsZUFBZSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3JILElBQUksZUFBZSxDQUFDLE1BQU0sSUFBSSxDQUFDLEVBQUU7UUFDN0IsSUFBSSxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQy9DLE9BQU8sZUFBZSxDQUFBO0tBQ3pCO0lBQ0QsSUFBSSxjQUFjLEdBQUcsTUFBTSxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsWUFBWSxFQUFFLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzdGLElBQUksQ0FBQyxjQUFjLEVBQUU7UUFDakIsSUFBSSxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQy9DLE9BQU8sZUFBZSxDQUFBO0tBQ3pCO0lBQ0QsSUFBSSxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDOUMsNkNBQTZDO0lBQzdDLElBQUksUUFBUSxHQUFHLGNBQWMsQ0FBQyxJQUFJLENBQUMsS0FBZSxDQUFDO0lBQ25ELElBQUksbUJBQW1CLEdBQUcsR0FBRyxRQUFRLGFBQWEsQ0FBQztJQUNuRCxLQUFLLElBQUksS0FBSyxHQUFHLENBQUMsRUFBRSxLQUFLLEdBQUcsY0FBYyxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLEVBQUU7UUFDbEUsTUFBTSxPQUFPLEdBQUcsY0FBYyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNoRCxJQUFJLE9BQU8sQ0FBQyxJQUFJLElBQUksbUJBQW1CLEVBQUU7WUFDckMsS0FBSyxNQUFNLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEtBQVksQ0FBQyxFQUFFO2dCQUM3RCxJQUFJLENBQUMsR0FBRyxLQUFZLENBQUM7Z0JBQ3JCLElBQUk7b0JBQ0EsSUFBSSxDQUFDLENBQUMsT0FBTyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxFQUFFO3dCQUNqRCxlQUFlLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFBO3FCQUN0RDtpQkFDSjtnQkFBQyxPQUFPLEtBQUssRUFBRTtvQkFDWixPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUNmLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7aUJBQ3RCO2FBQ0o7U0FDSjtLQUNKO0lBQ0QsT0FBTyxlQUFlLENBQUM7QUFDM0IsQ0FBQztBQUVELEtBQUssVUFBVSxjQUFjLENBQVksSUFBUztJQUM5QyxJQUFJLGVBQWUsR0FBRyxNQUFNLGlCQUFpQixDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDL0QsT0FBTyxlQUFlLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEtBQUssQ0FBQztBQUMxRSxDQUFDO0FBRUQsS0FBSyxVQUFVLGNBQWMsQ0FBWSxJQUFTLEVBQUUsS0FBYztJQUM5RCxJQUFJLGVBQWUsR0FBRyxNQUFNLGlCQUFpQixDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDL0QsZUFBZSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUM7SUFFOUQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLHNCQUFzQixFQUFFO1FBQ2pELElBQUksRUFBRSxnQkFBZ0I7UUFDdEIsTUFBTSxFQUFFLG1CQUFtQjtRQUMzQixJQUFJLEVBQUUsQ0FBQyxlQUFlLENBQUM7S0FDMUIsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIlxuJ3VzZSBzdHJpY3QnO1xuXG50eXBlIFNlbGVjdG9yPCQ+ID0geyAkOiBSZWNvcmQ8a2V5b2YgJCwgYW55IHwgbnVsbD4gfVxuZXhwb3J0IGNvbnN0IHRlbXBsYXRlID0gYFxuPGRpdiBjbGFzcz1cImNvbnRhaW5lclwiPlxuPHVpLWNoZWNrYm94IGNsYXNzPVwiYXV0b0JpbmRpbmdcIiB2YWx1ZT1cImZhbHNlXCI+QXV0b0JpbmRpbmc8L3VpLWNoZWNrYm94PlxuPC9kaXY+XG5gO1xuXG5leHBvcnRzLnN0eWxlID0gYFxuLmNvbnRhaW5lciB7XG4gICAgbWFyZ2luLXRvcDogMTBweDtcbiAgICBtYXJnaW4tYm90dG9tOiA1cHg7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIGJvcmRlcjogZGFzaGVkIDFweCAjNmI2YjZiO1xuICAgIGJvcmRlci1yYWRpdXM6IDRweDtcbn1cbmA7XG5cbmV4cG9ydCBjb25zdCAkID0geyBcbiAgICBjb250YWluZXI6IFwiLmNvbnRhaW5lclwiLFxuICAgIGF1dG9CaW5kaW5nOiBcIi5hdXRvQmluZGluZ1wiXG59O1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdXBkYXRlKHRoaXM6IGFueSwgZHVtcDogYW55KSB7XG4gICAgdGhpcy5kdW1wID0gZHVtcDtcbiAgICB0aGlzLiQuYXV0b0JpbmRpbmcudmFsdWUgPSBhd2FpdCBnZXRBdXRvQmluZGluZy5jYWxsKHRoaXMsIHRoaXMuZHVtcCk7XG59XG5leHBvcnQgZnVuY3Rpb24gcmVhZHkodGhpczogYW55KSB7XG4gICAgdGhpcy4kLmF1dG9CaW5kaW5nLmFkZEV2ZW50TGlzdGVuZXIoXCJjb25maXJtXCIsIGFzeW5jICgpID0+e1xuICAgICAgICBhd2FpdCBzZXRBdXRvQmluZGluZy5jYWxsKHRoaXMsIHRoaXMuZHVtcCwgdGhpcy4kLmF1dG9CaW5kaW5nLnZhbHVlKTtcbiAgICB9KTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0QXV0b0JpbmRpbmdNYXAodGhpczogYW55LCBkdW1wOiBhbnkpIHtcbiAgICBsZXQgYXV0b0JpbmRpbmdEYXRhOiB7cHJlZmFiVXVpZDpzdHJpbmcsIGF1dG9CaW5kaW5nTWFwOiB7W2tleTogc3RyaW5nXTogYm9vbGVhbn19ID0ge3ByZWZhYlV1aWQ6IGBgLCBhdXRvQmluZGluZ01hcDoge319O1xuICAgIC8vIOagueaNrue7hOS7tueahOiKgueCuXV1aWTmib7liLDoioLngrnnmoRJTm9kZSBkdW1w5pWw5o2uXG4gICAgbGV0IG5vZGVEdW1wID0gYXdhaXQgRWRpdG9yLk1lc3NhZ2UucmVxdWVzdCgnc2NlbmUnLCAncXVlcnktbm9kZScsIGR1bXAudmFsdWUubm9kZS52YWx1ZS51dWlkKTtcbiAgICBpZiAoIW5vZGVEdW1wLl9fcHJlZmFiX18pIHtcbiAgICAgICAgdGhpcy4kWydjb250YWluZXInXS5zZXRBdHRyaWJ1dGUoJ2hpZGRlbicsICcnKTtcbiAgICAgICAgcmV0dXJuIGF1dG9CaW5kaW5nRGF0YVxuICAgIH1cbiAgICAvLyDmoLnmja7oioLngrnlr7nlupTnmoRwcmVmYWLmn6Xor6Lkvb/nlKjkuobotYTmupAgVVVJRCDnmoToioLngrlcbiAgICBhdXRvQmluZGluZ0RhdGEucHJlZmFiVXVpZCA9IG5vZGVEdW1wLl9fcHJlZmFiX18udXVpZDtcbiAgICBsZXQgcHJlZmFiTm9kZXV1aWRzID0gYXdhaXQgRWRpdG9yLk1lc3NhZ2UucmVxdWVzdChcInNjZW5lXCIsIFwicXVlcnktbm9kZXMtYnktYXNzZXQtdXVpZFwiLCBhdXRvQmluZGluZ0RhdGEucHJlZmFiVXVpZCk7XG4gICAgaWYgKHByZWZhYk5vZGV1dWlkcy5sZW5ndGggPD0gMCkge1xuICAgICAgICB0aGlzLiRbJ2NvbnRhaW5lciddLnNldEF0dHJpYnV0ZSgnaGlkZGVuJywgJycpO1xuICAgICAgICByZXR1cm4gYXV0b0JpbmRpbmdEYXRhXG4gICAgfVxuICAgIGxldCBwcmVmYWJOb2RlRHVtcCA9IGF3YWl0IEVkaXRvci5NZXNzYWdlLnJlcXVlc3QoXCJzY2VuZVwiLCBcInF1ZXJ5LW5vZGVcIiwgcHJlZmFiTm9kZXV1aWRzWzBdKTtcbiAgICBpZiAoIXByZWZhYk5vZGVEdW1wKSB7XG4gICAgICAgIHRoaXMuJFsnY29udGFpbmVyJ10uc2V0QXR0cmlidXRlKCdoaWRkZW4nLCAnJyk7XG4gICAgICAgIHJldHVybiBhdXRvQmluZGluZ0RhdGFcbiAgICB9XG4gICAgdGhpcy4kWydjb250YWluZXInXS5yZW1vdmVBdHRyaWJ1dGUoJ2hpZGRlbicpO1xuICAgIC8vIOaJvuWIsOiHquWKqOe7keWumue7hOS7tu+8jOWIpOaWreWvueW6lOeahOe7keWumnV1aWTlkozlvZPliY3nu4Tku7bnmoR1dWlk5piv5ZCm5LiA6Ie077yM5LiA6Ie05YiZ6KGo56S66YCJ5LitXG4gICAgbGV0IG5vZGVOYW1lID0gcHJlZmFiTm9kZUR1bXAubmFtZS52YWx1ZSBhcyBzdHJpbmc7XG4gICAgbGV0IG5vZGVOYW1lQXV0b0JpbmRpbmcgPSBgJHtub2RlTmFtZX1BdXRvQmluZGluZ2A7XG4gICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHByZWZhYk5vZGVEdW1wLl9fY29tcHNfXy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IHByZWZhYk5vZGVEdW1wLl9fY29tcHNfX1tpbmRleF07XG4gICAgICAgIGlmIChlbGVtZW50LnR5cGUgPT0gbm9kZU5hbWVBdXRvQmluZGluZykge1xuICAgICAgICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoZWxlbWVudC52YWx1ZSBhcyBhbnkpKSB7XG4gICAgICAgICAgICAgICAgbGV0IHYgPSB2YWx1ZSBhcyBhbnk7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHYuZXh0ZW5kcyAmJiB2LmV4dGVuZHMuaW5jbHVkZXMoXCJjYy5Db21wb25lbnRcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF1dG9CaW5kaW5nRGF0YS5hdXRvQmluZGluZ01hcFt2LnZhbHVlLnV1aWRdID0gdHJ1ZVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2codik7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGF1dG9CaW5kaW5nRGF0YTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0QXV0b0JpbmRpbmcodGhpczogYW55LCBkdW1wOiBhbnkpIHtcbiAgICBsZXQgYXV0b0JpbmRpbmdEYXRhID0gYXdhaXQgZ2V0QXV0b0JpbmRpbmdNYXAuY2FsbCh0aGlzLCBkdW1wKTtcbiAgICByZXR1cm4gYXV0b0JpbmRpbmdEYXRhLmF1dG9CaW5kaW5nTWFwW2R1bXAudmFsdWUudXVpZC52YWx1ZV0gfHwgZmFsc2U7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHNldEF1dG9CaW5kaW5nKHRoaXM6IGFueSwgZHVtcDogYW55LCB2YWx1ZTogYm9vbGVhbikge1xuICAgIGxldCBhdXRvQmluZGluZ0RhdGEgPSBhd2FpdCBnZXRBdXRvQmluZGluZ01hcC5jYWxsKHRoaXMsIGR1bXApO1xuICAgIGF1dG9CaW5kaW5nRGF0YS5hdXRvQmluZGluZ01hcFtkdW1wLnZhbHVlLnV1aWQudmFsdWVdID0gdmFsdWU7XG5cbiAgICBFZGl0b3IuTWVzc2FnZS5zZW5kKCdzY2VuZScsICdleGVjdXRlLXNjZW5lLXNjcmlwdCcsIHtcbiAgICAgICAgbmFtZTogJ2Z0LWF1dG9iaW5kaW5nJyxcbiAgICAgICAgbWV0aG9kOiAndXBkYXRlQXV0b0JpbmRpbmcnLFxuICAgICAgICBhcmdzOiBbYXV0b0JpbmRpbmdEYXRhXSxcbiAgICB9KTtcbn0iXX0=